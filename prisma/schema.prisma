generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  phoneNumber   String    @unique
  role          Role      @default(CUSTOMER)
  resetToken    String?
  resetTokenExp DateTime?

  Profile Profile?
  cart    Cart[]
  order   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  phone     String?
  avatarUrl String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  images   String[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  color              String[]
  size               String[]
  inStock            Boolean  @default(true)
  price              Decimal
  priceAfterDiscount Decimal?

  images            String[]
  diamensionsImages String[]

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?

  cartItem  CartItem[]
  orderItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id                      Int      @id @default(autoincrement())
  cartTotalPrice          Decimal?
  cartTotalPriceAfterDiscount Decimal?

  customerId String     @unique
  customer   User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items      CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id                 Int      @id @default(autoincrement())
  quantity           Int?      @default(1)
  color              String
  size               String
  cartItemTotalPrice Decimal

  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int     @id @default(autoincrement())
  totalAmount Decimal
  status      String

  customerId String      @unique
  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items      OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  color     String
  size      String
  price    Decimal
  orderId  Int

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Decimal
  type      String
  minAmount Decimal?
  expiresAt DateTime
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
