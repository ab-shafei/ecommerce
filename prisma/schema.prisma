generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  phoneNumber   String    @unique
  role          Role      @default(CUSTOMER)
  resetToken    String?
  resetTokenExp DateTime?

  address     Address[]
  cart        Cart[]
  order       Order[]
  couponUsage CouponUsage[]
  review      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productNotification ProductNotification[]
}

model Address {
  id           Int     @id @default(autoincrement())
  name         String
  phoneNumber  String
  city         String
  region       String
  addressLine1 String
  addressLine2 String?
  isDefault    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  images   String[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  color              String[]
  size               String[]
  inStock            Boolean  @default(true)
  price              Float
  priceAfterDiscount Float
  homePage           Boolean  @default(false)
  images             String[]
  dimensionsImages   String[]

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?

  cartItem  CartItem[]
  orderItem OrderItem[]
  review    Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productNotification ProductNotification[]
}

model ProductNotification {
  id        Int      @id @default(autoincrement())
  userId    String
  productId String
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id                          Int        @id @default(autoincrement())
  cartTotalPrice              Float      @default(0)
  cartTotalPriceAfterDiscount Float      @default(0)
  couponId                    Int?
  discount                    Float?
  customerId                  String     @unique
  customer                    User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items                       CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id                              Int    @id @default(autoincrement())
  quantity                        Int
  color                           String
  size                            String
  cartItemTotalPrice              Float
  cartItemTotalPriceAfterDiscount Float

  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                Int           @id @default(autoincrement())
  total             Float
  shippingAmount    Float         @default(0)
  shippingLocation  String?
  contactNumber     String
  status            OrderStatus?  @default(PROCESSING)
  paymentMethod     PaymentMethod @default(CASH)
  paid              Boolean       @default(false)
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  customerId        String
  shippingAddressId Int
  paymentIntentId   String?
  payMobOrderId     Int?          @unique
  customer          User          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
  items             OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id                 Int    @id @default(autoincrement())
  name               String
  quantity           Int
  color              String
  size               String
  price              Float
  priceAfterDiscount Float
  productId          String
  orderId            Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  discount      Float
  start         DateTime
  end           DateTime
  minPurchase   Float?
  numberOfUsage Int?         @default(0)
  status        CouponStatus @default(UNUSED)

  couponUsage CouponUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CouponUsage {
  id       Int      @id @default(autoincrement())
  userId   String
  couponId Int
  usedAt   DateTime @default(now())

  user   User   @relation(references: [id], fields: [userId])
  coupon Coupon @relation(references: [id], fields: [couponId])
}

model Layout {
  id                 Int           @id @default(autoincrement())
  title              String?
  paragraph          String?
  color1             String?
  color2             String?
  color3             String?
  color4             String?
  returnPolicy       String?
  privacyPolicy      String?
  termsAndConditions String?
  aboutUs            String?
  contactEmail       String?
  contactPhoneNumber String?
  images             BannerImage[]
}

model BannerImage {
  id         Int      @id @default(autoincrement())
  categoryId String
  image      String[]

  layoutId Int
  layout   Layout @relation(fields: [layoutId], references: [id])
}

model Review {
  id        Int          @id @default(autoincrement())
  rating    Int
  comment   String?
  status    ReviewStatus @default(PENDING)
  productId String
  userId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

// ENUMS
enum Role {
  CUSTOMER
  ADMIN
}

enum CouponStatus {
  UNUSED
  USED
  EXPIRED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
  PAID
}

enum PaymentMethod {
  CASH
  CARD
  WALLET
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
